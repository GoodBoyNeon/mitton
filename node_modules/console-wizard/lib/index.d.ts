type StatusType = 'success' | 'info' | 'warn' | 'error';
type TableValue = string | number | undefined;
type TableData = {
    [key: string]: TableValue;
};

type TableBorder = {
    readonly cornerTL: string;
    readonly cornerTR: string;
    readonly cornerBL: string;
    readonly cornerBR: string;
    readonly edgeVertical: string;
    readonly edgeHorizontal: string;
    readonly intersectionTLR: string;
    readonly intersectionBLR: string;
    readonly intersectionTBL: string;
    readonly intersectionTBR: string;
    readonly intersectionCenter: string;
};

interface ConfigType {
    includeTimestamp?: boolean;
    includeStatus?: boolean;
    tableBorder?: TableBorder;
    includeSN?: boolean;
}
declare class WizardConfig {
    constructor(config: ConfigType);
}
declare const setWizardConfig: (config: ConfigType) => ConfigType;

interface LogDataType {
    timestamp: string;
    statusType: StatusType;
    message: string;
}

declare const logger: {
    error: (message: string, userConfigOverride?: ConfigType | undefined) => string;
    info: (message: string, userConfigOverride?: ConfigType | undefined) => string;
    success: (message: string, userConfigOverride?: ConfigType | undefined) => string;
    warn: (message: string, userConfigOverride?: ConfigType | undefined) => string;
    table: (data: TableData[], configOverride?: Pick<ConfigType, "tableBorder" | "includeSN"> | undefined) => void;
};

export { ConfigType, LogDataType, WizardConfig, logger, setWizardConfig };
